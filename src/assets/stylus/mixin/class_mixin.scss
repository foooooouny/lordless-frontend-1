/**
 * Fix for vw, vh, vmin, vmax on iOS 7.
 * http://caniuse.com/#feat=viewport-units
 *
 * This fix works by replacing viewport units with px values on known screen sizes.
 *
 * iPhone 6 and 6 Plus cannot run iOS 7, so are not targeted by this fix.
 * Target devices running iOS 8+ will incidentally execute the media query,
 * but this will still produce the expected result; so this is not a problem.
 *
 * As an example, replace:
 *
 *   height: 50vh;
 *   font-size: 5vmin;
 *
 * with:
 *
 *   @include viewport-unit(height, 50vh);
 *   @include viewport-unit(font-size, 5vmin);
 */
@mixin viewport-unit($property, $value, $minus: 0px, $sm: 1, $lg: 1) {
  @media screen and (max-width: 768px) {
    @if ($sm != -1) {
      @include viewport-unit-tool($property, $value, $minus);
    }
  }
  @media screen and (min-width: 769px) {
    @if ($value == 100vw) {
      #{$property}: calc(100% - #{$minus});
    }
    @else if ($lg != -1) {
      @include viewport-unit-tool($property, $value, $minus);
    }
  }
}

@mixin viewport-unit-tool($property, $value, $minus: 0px) {
  #{$property}: calc(#{$value} - #{$minus});

  $unit: unit($value);

  @if (index((vw, vh, vmin, vmax), $unit) != null) {
    $devices: (
      (768px, 1024px), // iPad (all versions)
      (320px, 480px),  // iPhone 4
      (320px, 568px)   // iPhone 5, 5C, 5S
    );

    @each $device in $devices {
      $device-width: nth($device, 1);
      $device-height: nth($device, 2);

      $device-query: "only screen and (-webkit-min-device-pixel-ratio: 1)";
      $device-query: "#{$device-query} and (device-width: #{$device-width})";
      $device-query: "#{$device-query} and (device-height: #{$device-height})";

      $percent: $value / ($value * 0 + 1); // see https://github.com/sass/sass/issues/533

      $percent-width: $device-width * $percent / 100;
      $percent-height: $device-height * $percent / 100;

      @if ($minus != 0px) {
        $percent-width: $device-width * $percent / 100 - $minus;
        $percent-height: $device-height * $percent / 100 - $minus;
      }

      @if ($unit == vmin or $unit == vmax) {
        @media #{$device-query} {
          #{$property}: if($unit == vmin, $percent-width, $percent-height);
        }
      }
      @else {
        @media #{$device-query} and (orientation: portrait) {
          #{$property}: if($unit == vw, $percent-width, $percent-height);
        }

        @media #{$device-query} and (orientation: landscape) {
          #{$property}: if($unit == vw, $percent-height, $percent-width);
        }
      }
    }
  }
}

/* 样式函数 */

@mixin bg-size($size: cover, $position-x: 50%, $position-y: 30%, $repeat: no-repeat) {
  background-size: $size;
  background-position-x: $position-x;
  background-position-y: $position-y;
  background-repeat: $repeat;
}

/* dialog-ldb-detail mixin class */
@mixin dialog-theme($theme: 'light') {
  @if $theme == 'light' {
    background-color: #f4f4f4;
  }
  @if $theme == 'white' {
    background-color: #fff;
  }
  @if $theme == 'dark' {
    color: #E6E8EC;
    background-color: #101010;
  }
  @if $theme == 'gray' {
    color: #E6E8EC;
    background-color: #2b2b2b;
  }
  @if $theme == 'default' {
    color: #E6E8EC;
    background-color: $--default-bg-color;
  }
}

@mixin bg-img-class($url, $repeat: no-repeat, $size: cover, $position: 0 0) {
  background-image: url($url);
  background-repeat: $repeat;
  background-size: $size;
  background-position: $position;
}

// @mixin margin-vars ($cardinal: 5px) {
//   @mixin margin ($direction: '', $size: 2) {
//     @if ($direction) {
//       margin: $size * $cardinal;
//     } @else {
//       margin-#{$direction}: $size * $cardinal;
//     }
//   }
// }

/* 边距计算 */
@mixin distance-vars ($noun, $direction: -1, $size: 10px) {
  @if ($direction != -1) {
    #{$noun}-#{$direction}: $size;
  } @else {
    #{$noun}: $size;
  }
}

/**
 *  margin 或 padding 边距通用 css minix
 *  $noun: 边距类别
 *  $direction: 边距方向，默认为空
 *  $size: 边距尺寸大小
 *  $multiple: md 及 sm 屏幕尺寸下边距比例, 值为 -1 的时候，在 sm 尺寸下为0
 *  $md: 在 md 尺寸下是否显示，1：显示，-1：不显示，默认：1
 */
@mixin distance ($noun: 'margin', $direction: -1, $size: 10px, $multiple: 2, $md: 1) {
  @media screen and (min-width: 769px) {
    $md_size: $size;
    @if ($md == -1) {
      $md_size: 0px;
    }
    @if ($md != -2) {
      @include distance-vars($noun, $direction, $md_size);
    }
  }
  @media screen and (max-width: 768px) {
    $sm_size: $size;
    @if ($multiple != -2) {
      @if ($multiple == -1) {
        $sm_size: 0px;
      } @else {
        $sm_size: $sm_size / $multiple
      }
      @include distance-vars($noun, $direction, $sm_size);
    }
  }
}

@mixin distance-around ($noun: 'margin', $top: 0, $right: 0, $bottom: 0, $left: 0, $multiple: 2, $md: 1) {
  @media screen and (min-width: 769px) {
    $md_top: $top;
    $md_right: $right;
    $md_bottom: $bottom;
    $md_left: $left;
    @if ($md == -1) {
      #{$noun}: 0;
    }
    @if ($md != -2) {
      #{$noun}: $md_top $md_right $md_bottom $md_left;
    }
  }
  @media screen and (max-width: 768px) {
    $sm_top: $top;
    $sm_right: $right;
    $sm_bottom: $bottom;
    $sm_left: $left;
    @if ($multiple != -2) {
      @if ($multiple == -1) {
        $sm_top: 0;
        $sm_right: 0;
        $sm_bottom: 0;
        $sm_left: 0;
      } @else {
        $sm_top: $sm_top / $multiple;
        $sm_right: $sm_right / $multiple;
        $sm_bottom: $sm_bottom / $multiple;
        $sm_left: $sm_left / $multiple;
      }
      #{$noun}: $sm_top $sm_right $sm_bottom $sm_left;
    }
  }
}

@mixin margin ($direction: -1, $size: 10px, $multiple: 2, $md: 1) {
  @include distance('margin', $direction, $size, $multiple, $md)
}

@mixin margin-around ($top: 0, $right: 0, $bottom: 0, $left: 0, $multiple: 2, $md: 1) {
  @include distance-around('margin', $top, $right, $bottom, $left, $multiple, $md);
}

@mixin padding ($direction: -1, $size: 10px, $multiple: 2, $md: 1) {
  @include distance('padding', $direction, $size, $multiple, $md)
}

@mixin padding-around ($top: 0, $right: 0, $bottom: 0, $left: 0, $multiple: 2, $md: 1) {
  @include distance-around('padding', $top, $right, $bottom, $left, $multiple, $md);
}

@mixin dimension($noum: 'width', $size: 20px, $multiple: 2, $md: 1) {
  @media screen and (min-width: 769px) {
    $md_size: $size;
    @if ($md == -1) {
      $md_size: 0px;
    }
    @if ($md != -2) {
      #{$noum}: $md_size;
    }
  }
  @media screen and (max-width: 768px) {
    $sm_size: $size;
    @if ($multiple != -2) {
      @if ($multiple == -1) {
        $sm_size: 0px;
      } @else {
        $sm_size: $sm_size / $multiple
      }
      #{$noum}: $sm_size;
    }
  }
}

@mixin width ($size: 20px, $multiple: 2, $md: 1) {
  @include dimension('width', $size, $multiple, $md)
}

@mixin height ($size: 20px, $multiple: 2, $md: 1) {
  @include dimension('height', $size, $multiple, $md)
}

@mixin fontSize ($size: 10px, $multiple: 2) {
  @media screen and (min-width: 769px) {
    font-size: $size;
  }
  @media screen and (max-width: 768px) {
    font-size: $size / $multiple;
  }
}

@mixin radial-gradient-bg($outside, $inside) {
  background-image: -moz-radial-gradient($inside, $outside); /* new syntax */
  background-image: -webkit-radial-gradient($inside, $outside); /* new syntax */
  background-image: radial-gradient($inside, $outside);
}

/**
 *  $property: css 属性
 *  $value: css 参数
 *  $multiple: 显示控制， 1: >769px  -1: <= 769px
 */
@mixin grid($property: 'width', $value: 20px, $multiple: 1) {
  @media screen and (min-width: 769px) {
    @if ($multiple == 1) {
      #{$property}: $value;
    }
  }
  @media screen and (max-width: 768px) {
    @if ($multiple == -1) {
      #{$property}: $value;
    }
  }
}

/* 布局 */
@mixin overflow () {
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}

/* 字体 */
@mixin ImpactFont () {
  font-family: $--font-ImpactFont;
}
@mixin TTFontNormal () {
  font-family: $--font-TTNormsRegular;
}
@mixin TTFontBold () {
  font-family: $--font-TTNormsMedium;
}
@mixin TTFontBolder () {
  font-family: $--font-TTNormsBold;
}
@mixin TTFontBlack () {
  font-family: $--font-TTNormsBlack;
}

